diff --git a/include/mbedtls/aes.h b/include/mbedtls/aes.h
index d5eb1fd5c..4e181c556 100644
--- a/include/mbedtls/aes.h
+++ b/include/mbedtls/aes.h
@@ -39,6 +39,8 @@
 #define MBEDTLS_AES_ENCRYPT     1 /**< AES encryption. */
 #define MBEDTLS_AES_DECRYPT     0 /**< AES decryption. */
 
+#define MBEDTLS_AES_MASKING
+
 /* Error codes in range 0x0020-0x0022 */
 /** Invalid key length. */
 #define MBEDTLS_ERR_AES_INVALID_KEY_LENGTH                -0x0020
@@ -64,7 +66,14 @@ typedef struct mbedtls_aes_context {
     int MBEDTLS_PRIVATE(nr);                     /*!< The number of rounds. */
     size_t MBEDTLS_PRIVATE(rk_offset);           /*!< The offset in array elements to AES
                                                     round keys in the buffer. */
-#if defined(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH) && !defined(MBEDTLS_PADLOCK_C)
+#if defined(MBEDTLS_AES_MASKING)
+    // Secret shares - don't reveal the clear text variable
+    /* For AES-128: 10 round keys + 1 initial = 16 keys * 4 words = 44 words */
+    uint32_t MBEDTLS_PRIVATE(buf_masked)[44]; /* Masked values */
+    uint32_t MBEDTLS_PRIVATE(buf_mask)[44];   /* Masks */
+    uint32_t MBEDTLS_PRIVATE(buf)[44];           /*!< Aligned data buffer to hold
+                                                    10 round keys for 128-bit case. */
+#elif(MBEDTLS_AES_ONLY_128_BIT_KEY_LENGTH) && !defined(MBEDTLS_PADLOCK_C)
     uint32_t MBEDTLS_PRIVATE(buf)[44];           /*!< Aligned data buffer to hold
                                                     10 round keys for 128-bit case. */
 #else
